const path = require('path')
const { getDefaultConfig, mergeConfig } = require('@react-native/metro-config')
const {
  wrapWithReanimatedMetroConfig,
} = require('react-native-reanimated/metro-config')

const projectRoot = __dirname

const extraNodeModules = {
  '@app': path.resolve(projectRoot, 'src/app'),
  '@shared': path.resolve(projectRoot, 'src/shared'),
  '@screens': path.resolve(projectRoot, 'src/screens'),
  '@widgets': path.resolve(projectRoot, 'src/widgets'),
  '@features': path.resolve(projectRoot, 'src/features'),
  '@entities': path.resolve(projectRoot, 'src/entities'),
  '@navigation': path.resolve(projectRoot, 'src/navigation'),
}

const config = {
  resolver: {
    extraNodeModules,
    assetExts: [
      'png',
      'jpg',
      'jpeg',
      'gif',
      'bmp',
      'tiff',
      'webp',
      'mp4',
      'mov',
      'avi',
      'flv',
      'wmv',
      'mkv',
      'webm',
      'mpeg',
      '3gp',
      'mp3',
      'wav',
      'aac',
      'ogg',
      'oga',
      'opus',
      'flac',
      'json',
      'txt',
      'pdf',
      'doc',
      'docx',
      'xls',
      'xlsx',
      'ppt',
      'pptx',
      'zip',
      'rar',
      'tar',
      'gz',
      '7z',
      'apk',
      'ipa',
      'bin',
      'dat',
      'db',
      'iso',
      'jar',
      'exe',
      'msi',
      'dmg',
      'toast',
      'vcd',
      'log',
      'key',
      'pem',
      'crt',
      'cer',
      'pfx',
      'p12',
      'csr',
      'der',
      'config',
      'properties',
      'yaml',
      'yml',
      'env',
      'ini',
      'md',
      'xml',
      'woff',
      'woff2',
      'ttf',
      'otf',
    ].filter((ext) => ext !== 'svg'),
    sourceExts: ['js', 'jsx', 'ts', 'tsx', 'json', 'mjs', 'cjs', 'svg'],
  },
  transformer: {
    babelTransformerPath: require.resolve('react-native-svg-transformer'),
  },
  watchFolders: [path.resolve(projectRoot, 'src')],
}

module.exports = wrapWithReanimatedMetroConfig(
  mergeConfig(getDefaultConfig(projectRoot), config)
)
